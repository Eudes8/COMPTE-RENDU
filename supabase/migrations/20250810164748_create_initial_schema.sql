-- =================================================================
--                  SCHEMA DE BASE DE DONNÉES AUTOMATIC
-- =================================================================
-- Ce fichier de migration initialise les tables principales de l'application.

-- 1. Table des profils utilisateurs
--    Stocke les données publiques des utilisateurs, liées à la table d'authentification.
-- =================================================================

create table public.profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  role text default 'client'::text
);

alter table public.profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on public.profiles
  for select using (true);

create policy "Users can insert their own profile." on public.profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on public.profiles
  for update using (auth.uid() = id);

-- 2. Fonction et Déclencheur (Trigger) pour synchroniser les profils
--    Crée automatiquement un profil pour chaque nouvel utilisateur.
-- =================================================================

create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id)
  values (new.id);
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- 3. Types énumérés pour les statuts
--    Définit des types de données personnalisés pour les statuts des devis et projets.
-- =================================================================

create type public.quote_status as enum ('nouveau', 'accepté', 'rejeté');
create type public.project_status as enum ('actif', 'en_pause', 'terminé');

-- 4. Table des devis (Quotes)
--    Stocke les demandes de devis faites par les clients.
-- =================================================================

create table public.quotes (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  client_email text not null,
  project_details jsonb,
  status public.quote_status not null default 'nouveau'
);

alter table public.quotes
  enable row level security;

create policy "Les utilisateurs peuvent créer des devis." on public.quotes
  for insert with check (true); -- Une politique plus stricte pourrait être nécessaire plus tard.

create policy "Les administrateurs peuvent tout voir." on public.quotes
  for select using (auth.jwt() ->> 'role' = 'admin');


-- 5. Table des projets (Projects)
--    Stocke les informations sur les projets en cours ou terminés.
-- =================================================================

create table public.projects (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone,
  name text not null,
  client_id uuid not null references public.profiles(id),
  status public.project_status not null default 'actif'
);

alter table public.projects
  enable row level security;

create policy "Les clients peuvent voir leurs propres projets." on public.projects
  for select using (auth.uid() = client_id);

create policy "Les administrateurs peuvent tout voir." on public.projects
  for select using (auth.jwt() ->> 'role' = 'admin');

-- Note: Les politiques de sécurité (RLS) sont des exemples de base et
-- devraient être affinées en fonction des besoins réels de l'application.
