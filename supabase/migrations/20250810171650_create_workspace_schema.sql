-- =================================================================
-- MIGRATION: SCHÉMA POUR L'ESPACE DE TRAVAIL PROJET
-- =================================================================
-- Crée les tables `messages` et `project_files`, le bucket de stockage,
-- et applique les politiques de sécurité nécessaires.

-- 1. Table des messages
--    Stocke les messages de chat pour chaque projet.
-- =================================================================

create table public.messages (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  project_id bigint not null references public.projects(id) on delete cascade,
  sender_id uuid not null references public.profiles(id),
  content text not null check (char_length(content) > 0)
);

alter table public.messages enable row level security;


-- 2. Table des fichiers de projet
--    Stocke les métadonnées des fichiers uploadés.
-- =================================================================

create table public.project_files (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  project_id bigint not null references public.projects(id) on delete cascade,
  uploader_id uuid not null references public.profiles(id),
  file_name text not null,
  storage_path text not null unique
);

alter table public.project_files enable row level security;


-- 3. Création du Bucket Supabase Storage
--    Le bucket 'project-files' stockera tous les fichiers des projets.
-- =================================================================

insert into storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
values ('project-files', 'project-files', false, 52428800, null); -- 50MB limit, all types allowed


-- 4. Politiques de Sécurité (RLS) pour `messages`
-- =================================================================

create policy "Les membres du projet peuvent voir les messages." on public.messages
  for select using (
    (select role from public.profiles where id = auth.uid()) = 'admin'
    or
    (select client_id from public.projects where id = messages.project_id) = auth.uid()
  );

create policy "Les membres du projet peuvent envoyer des messages." on public.messages
  for insert with check (
    sender_id = auth.uid() and (
      (select role from public.profiles where id = auth.uid()) = 'admin'
      or
      (select client_id from public.projects where id = messages.project_id) = auth.uid()
    )
  );


-- 5. Politiques de Sécurité (RLS) pour `project_files`
-- =================================================================

create policy "Les membres du projet peuvent voir la liste des fichiers." on public.project_files
  for select using (
    (select role from public.profiles where id = auth.uid()) = 'admin'
    or
    (select client_id from public.projects where id = project_files.project_id) = auth.uid()
  );

create policy "Les admins peuvent uploader des fichiers." on public.project_files
  for insert with check (
    (select role from public.profiles where id = auth.uid()) = 'admin' and uploader_id = auth.uid()
  );


-- 6. Politiques de Sécurité pour Supabase Storage (`project-files` bucket)
--    Le chemin des fichiers est supposé être `[project_id]/[file_name]`
-- =================================================================

create policy "Les admins peuvent uploader des fichiers dans le dossier du projet." on storage.objects
  for insert to authenticated with check (
    bucket_id = 'project-files'
    and (select role from public.profiles where id = auth.uid()) = 'admin'
  );

create policy "Les membres du projet peuvent voir les fichiers de leur projet." on storage.objects
  for select to authenticated using (
    bucket_id = 'project-files'
    and (
          (select role from public.profiles where id = auth.uid()) = 'admin'
          or
          (select client_id from public.projects where id = (storage.foldername(name))[1]::bigint) = auth.uid()
        )
  );

create policy "Les membres du projet peuvent télécharger les fichiers de leur projet." on storage.objects
  for select to authenticated using (
    bucket_id = 'project-files'
    and (
          (select role from public.profiles where id = auth.uid()) = 'admin'
          or
          (select client_id from public.projects where id = (storage.foldername(name))[1]::bigint) = auth.uid()
        )
  );
